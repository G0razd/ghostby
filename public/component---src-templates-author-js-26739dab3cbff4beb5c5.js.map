{"version":3,"sources":["webpack:///./src/templates/author.js"],"names":["data","location","pageContext","author","posts","twitterUrl","facebookUrl","type","className","href","target","rel","src","alt","name","node","key","post"],"mappings":"6FAAA,wDA2EA,UA9De,SAAC,GAAqC,IAAnCA,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACxBC,EAASH,EAAf,YACMI,EAAQJ,eAAd,MACMK,EAAaF,iCAAwCA,uBAAxCA,IAAnB,KACMG,EAAcH,uCAA8CA,yBAA9CA,IAApB,KAEA,OACI,oCACI,uBACIH,KADJ,EAEIC,SAFJ,EAGIM,KAAK,YAET,2BACI,yBAAKC,UAAU,aACX,4BAAQA,UAAU,iBACd,yBAAKA,UAAU,yBACX,4BAAKL,EADT,MAEKA,OAAc,2BAAIA,EAFvB,KAGI,yBAAKK,UAAU,sBACVL,WAAkB,uBAAGK,UAAH,qBAAkCC,KAAMN,EAAxC,QAAwDO,OAAxD,SAAwEC,IAAI,uBADnG,WAEKN,GAAc,uBAAGG,UAAH,qBAAkCC,KAAlC,EAAoDC,OAApD,SAAoEC,IAAI,uBAF3F,WAGKL,GAAe,uBAAGE,UAAH,qBAAkCC,KAAlC,EAAqDC,OAArD,SAAqEC,IAAI,uBAPrG,cAUI,yBAAKH,UAAU,uBACVL,iBAAwB,yBAAKS,IAAKT,EAAV,cAAgCU,IAAKV,EAAOW,SAG7E,6BAASN,UAAU,aACdJ,EAAA,KAAU,gBAAGW,EAAH,cAEP,uBAAUC,IAAKD,EAAf,GAAwBE,KAAMF,QAGtC,uBAAYb,YAAaA","file":"component---src-templates-author-js-26739dab3cbff4beb5c5.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql } from 'gatsby'\r\n\r\nimport { Layout, PostCard, Pagination } from '../components/common'\r\nimport { MetaData } from '../components/common/meta'\r\n\r\n/**\r\n* Author page (/author/:slug)\r\n*\r\n* Loads all posts for the requested author incl. pagination.\r\n*\r\n*/\r\nconst Author = ({ data, location, pageContext }) => {\r\n    const author = data.ghostAuthor\r\n    const posts = data.allGhostPost.edges\r\n    const twitterUrl = author.twitter ? `https://twitter.com/${author.twitter.replace(/^@/, ``)}` : null\r\n    const facebookUrl = author.facebook ? `https://www.facebook.com/${author.facebook.replace(/^\\//, ``)}` : null\r\n\r\n    return (\r\n        <>\r\n            <MetaData\r\n                data={data}\r\n                location={location}\r\n                type=\"profile\"\r\n            />\r\n            <Layout>\r\n                <div className=\"container\">\r\n                    <header className=\"author-header\">\r\n                        <div className=\"author-header-content\">\r\n                            <h1>{author.name}</h1>\r\n                            {author.bio && <p>{author.bio}</p>}\r\n                            <div className=\"author-header-meta\">\r\n                                {author.website && <a className=\"author-header-item\" href={author.website} target=\"_blank\" rel=\"noopener noreferrer\">Website</a>}\r\n                                {twitterUrl && <a className=\"author-header-item\" href={twitterUrl} target=\"_blank\" rel=\"noopener noreferrer\">Twitter</a>}\r\n                                {facebookUrl && <a className=\"author-header-item\" href={facebookUrl} target=\"_blank\" rel=\"noopener noreferrer\">Facebook</a>}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"author-header-image\">\r\n                            {author.profile_image && <img src={author.profile_image} alt={author.name} />}\r\n                        </div>\r\n                    </header>\r\n                    <section className=\"post-feed\">\r\n                        {posts.map(({ node }) => (\r\n                            // The tag below includes the markup for each post - components/common/PostCard.js\r\n                            <PostCard key={node.id} post={node} />\r\n                        ))}\r\n                    </section>\r\n                    <Pagination pageContext={pageContext} />\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    )\r\n}\r\n\r\nAuthor.propTypes = {\r\n    data: PropTypes.shape({\r\n        ghostAuthor: PropTypes.shape({\r\n            name: PropTypes.string.isRequired,\r\n            cover_image: PropTypes.string,\r\n            profile_image: PropTypes.string,\r\n            website: PropTypes.string,\r\n            bio: PropTypes.string,\r\n            location: PropTypes.string,\r\n            facebook: PropTypes.string,\r\n            twitter: PropTypes.string,\r\n        }),\r\n        allGhostPost: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    location: PropTypes.shape({\r\n        pathname: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n    pageContext: PropTypes.object,\r\n}\r\n\r\nexport default Author\r\n\r\nexport const pageQuery = graphql`\r\n    query GhostAuthorQuery($slug: String!, $limit: Int!, $skip: Int!) {\r\n        ghostAuthor(slug: { eq: $slug }) {\r\n            ...GhostAuthorFields\r\n        }\r\n        allGhostPost(\r\n            sort: { order: DESC, fields: [published_at] },\r\n            filter: {authors: {elemMatch: {slug: {eq: $slug}}}},\r\n            limit: $limit,\r\n            skip: $skip\r\n        ) {\r\n            edges {\r\n                node {\r\n                ...GhostPostFields\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n"],"sourceRoot":""}